<?php

/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
abstract class PluginsfAsset extends BasesfAsset
{
  protected $binary_data = null;
  protected $old_locations = null;
  protected $old_folder_id = null;
  
  /*
   * Get folder relative path
   *
   * @return string
   */
  public function getFolderPath()
  {
    $folder = $this->getsfAssetFolder();
    
    if (!$folder)
    {
      throw new Exception(sprintf('You must set define the folder for an asset prior to getting its path. Asset %d doesn\'t have a folder yet.', $this->getFilename()));
    }
    
    return $folder->getRelativePath();
  }

  public function setFolderId($folder_id)
  {
    if(is_null($this->old_folder_id))
    {
      $this->old_folder_id = $this->getFolderId();
    }
    
    $this->_set('folder_id', $folder_id);
  }
  
  /**
   * Gives the file relative path
   *
   * @return string
   */
  public function getRelativePath()
  {
    return $this->getFolderPath() . '/' . $this->getFilename();
  }

  /**
   * Gives full filesystem path
   *
   * @param string $thumbnail_type
   * @return string
   */
  public function getFullPath($thumbnail_type = 'full')
  {
    return sfAssetsLibraryTools::getThumbnailPath($this->getFolderPath(), $this->getFilename(), $thumbnail_type);
  }

  public function setFilename($filename)
  {
    $filename = sfAssetsLibraryTools::sanitizeName($filename);

    if(sfAssetsLibraryTools::sanitizeName($filename) != $filename)
    {
      throw new sfAssetException('The filename "%name%" contains incorrect characters. The asset has not be altered.', array('%name%' => $new_filename));
    }
    
    if(is_null($this->old_locations) && $this->exists())
    {
      $this->old_locations = $this->getFilepaths();
    }
    
    return $this->_set('filename', $filename);
  }

  /**
   * Gives the URL for the given thumbnail
   *
   * @param string $thumbnail_type
   * @return string
   */
  public function getUrl($thumbnail_type = 'full', $relative_path = null)
  {
    if(is_null($relative_path))
    {
      if (!$folder = $this->getsfAssetFolder())
      {
        throw new Exception(sprintf('You must set define the folder for an asset prior to getting its path. Asset %d doesn\'t have a folder yet.', $this->getFilename()));
      }
      $relative_path = $folder->getRelativePath();
    }
    $url = sfAssetsLibraryTools::getMediaDir();
    if ($thumbnail_type == 'full')
    {
      $url .= $relative_path . DIRECTORY_SEPARATOR . $this->getFilename();
    }
    else
    {
      $url .= sfAssetsLibraryTools::getThumbnailDir($relative_path) . $thumbnail_type . '_' . $this->getFilename();
    }

    return $url;
  }

  public function autoSetType()
  {
    $this->setType(sfAssetsLibraryTools::getType($this->getFullPath()));
  }

  public function isImage()
  {
    return $this->getType() === 'image';
  }
  
  public function isFlashVideo()
  {
    return $this->getType() === 'flv';
  }  

  public function supportsThumbnails()
  {
    return $this->isImage() && class_exists('sfThumbnail');
  }

  /**
   * Physically creates asset
   *
   * @param string $asset_path path to the asset original file
   * @param bool $move do move or just copy ?
   */
  public function createAsset($asset_path, $move = true, $checkDuplicate = true)
  {
    
    if (!is_file($asset_path))
    {
      throw new sfAssetException('Asset "%asset%" not found', array('%asset%' => $asset_path));
    }

    // calculate asset properties
    if (!$this->getFilename())
    {
      list (,$filename) = sfAssetsLibraryTools::splitPath($asset_path);
      $this->setFilename($filename);
    }

    // check folder
    if (!$this->getsfAssetFolder()->presents())
    {
      $this->getsfAssetFolder()->createFolder();
    }
    else
    {
      // check if a file with this name already exists
      if($checkDuplicate && sfAssetTable::presents($this->getsfAssetFolder()->getId(), $this->getFilename()))
      {
        $this->setFilename(time().$this->getFilename());
      }
    }

    $this->setFilesize(((int) filesize($asset_path) / 1024));
    $this->autoSetType();
    if (sfConfig::get('app_sfDoctrineAssetsLibrary_check_type', false) && !in_array($this->getType(), sfConfig::get('app_sfDoctrineAssetsLibrary_types', array('image', 'txt', 'archive', 'pdf', 'xls', 'doc', 'ppt'))))
    {
      throw new sfAssetException('Filetype "%type%" not allowed', array('%type%' => $this->getType()));
    }

    if ($move)
    {
      rename($asset_path, $this->getFullPath());
    }
    else
    {
      copy($asset_path, $this->getFullPath());
    }

    if ($this->supportsThumbnails())
    {
      sfAssetsLibraryTools::createThumbnails($this->getFolderPath(), $this->getFilename());
    }
  }

  public function getFilepaths()
  {
    $filepaths = array('full' => $this->getFullPath());
    if ($this->isImage())
    {
      // Add path to the thumbnails
      foreach (sfConfig::get('app_sfDoctrineAssetsLibrary_thumbnails', array(
        'small' => array('width' => 84, 'height' => 84, 'shave' => true),
        'large' => array('width' => 194, 'height' => 152)
      )) as $key => $params)
      {
        $filepaths[$key] = $this->getFullPath($key);
      }
    }

    return $filepaths;
  }


  /**
   * Change asset directory and/or name
   *
   * @param sfAssetFolder $new_folder
   */
  private function move()
  {
    
    $new_folder = $this->sfAssetFolder;
    $old_folder_id = $this->old_folder_id;
    
    if($old_folder_id == $this->sfAssetFolder->id)
    {
      return;
    }
    
    if(sfAssetTable::presents($this->sfAssetFolder->id, $this->getFilename()))
    {
      throw new sfAssetException('The target folder "%folder%" already contains an asset named "%name%". The asset has not been moved.', array('%folder%' => $new_folder->getName(), '%name%' => $this->getFilename()));
    }
    
    $this->setFolderId($old_folder_id);
    $this->refreshRelated('sfAssetFolder');
    
    $old_filepaths = $this->getFilepaths();
    
    $this->sfAssetFolder = $new_folder;
    
    $success = true;
    foreach ($old_filepaths as $type => $filepath)
    {
      if(!is_file($filepath))
      {
        
        continue;
      }
      
      $success = rename($filepath, $this->getFullPath($type)) && $success;
    }
    
    
    if(!$success)
    {
      throw new sfAssetException('Some or all of the file operations failed. It is possible that the moved asset or its thumbnails are missing.');
    }
  }
  
  /**
   * Physically remove assets
   */
  public function postDelete($event)
  {
    $success = true;
    foreach ($this->getFilepaths() as $filepath)
    {
      if(!is_file($filepath))
      {
        continue;
      }
      $success = unlink($filepath) && $success;
    }

    return $success;
  }

  public function getBinaryContent()
  {
    return $this->binary_data;
  }
  
  public function setBinaryContent($data)
  { 
    if(is_array($data) && $data['tmp_name'])
    {
      $this->setFilename($data['name']);
      $this->setFilesize($data['size']);
      $this->setType($data['type']);
      
      $this->binary_data = $data;
    }
    
    if($data instanceof sfValidatedFile)
    {
      $this->setFilename($data->getOriginalName());
      $this->setFilesize($data->getSize());
      $this->setType($data->getType());
      
      $this->binary_data = $data;
    }
  }
  
  /**
  * Returns an Image src, and only an image
  * use getUrl if you want to have the real path
  *
  * If the asset is not an image, it will return a thumbnail, a generic icon ...
  * depending on the type of asset
  */
public function getImageSrc($thumbnail_type='full', $relative_path=null)
{
  if($this->isImage() && $this->supportsThumbnails())
  {
    $src = $this->getUrl($thumbnail_type, $relative_path);
  }
  else
  {
    if($thumbnail_type == 'full')
    {
      throw new sfAssetException('Impossible to render a non-image asset in an image tag');
    }
    else
    {
      switch($this->getType())
      {
        case 'txt':
        $src = '/sfDoctrineAssetsLibraryPlugin/images/txt.png';
        break;
        case 'xls':
        $src = '/sfDoctrineAssetsLibraryPlugin/images/xls.png';
        break;
        case 'doc':
        $src = '/sfDoctrineAssetsLibraryPlugin/images/doc.png';
        break;
        case 'pdf':
        $src = '/sfDoctrineAssetsLibraryPlugin/images/pdf.png';
        break;
        case 'html':
        $src = '/sfDoctrineAssetsLibraryPlugin/images/html.png';
        break;
        case 'archive':
        $src = '/sfDoctrineAssetsLibraryPlugin/images/archive.png';
        break;
        case 'bin':
        $src = '/sfDoctrineAssetsLibraryPlugin/images/bin.png';
        break;
        default:
        $src = '/sfDoctrineAssetsLibraryPlugin/images/unknown.png';
      }
    }
  }
  
  return $src;    
}
  
  public function save(Doctrine_Connection $conn = null)
  {
    
    $modified_fields = $this->getModified();
    
    if(array_key_exists('filename', $modified_fields) && $this->old_locations)
    {
      // file name change, ok rename it
      foreach($this->old_locations as $old_location)
      {
        if(!is_file($old_location))
        {
          continue;
        }
        
        rename($old_location , $this->getFullPath());
      }
      
      $this->old_locations = null;
    }
    
    if(array_key_exists('folder_id', $modified_fields))
    {
      $this->move();
    }
    
    if(is_array($this->binary_data))
    {
      $this->createAsset($this->binary_data['tmp_name'], true);
    }
    
    if($this->binary_data instanceof sfValidatedFile)
    {
      $this->createAsset($this->binary_data->getTempName(), true);
    }
    
    if(!$this->getFilename())
    {
      return;
    }
    
    parent::save($conn);
    
  }
}